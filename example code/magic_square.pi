import cp.

main =>
    N = 5, % size of problem
    time2(magic(N,Square)),
    println(Square),
    foreach(Srow in Square)
        foreach(Scol in Srow)
            printf("%*d", 5, Scol)
        end,
        printf("\n")
    end.

magic(N,Square) =>
    NN = N*N,
    Sum = N*(NN+1)//2,% magical sum
    Square = new_array(N,N),
    Square :: 1..NN,
    all_different(Square.vars()),
    foreach (I in 1..N)
        Sum #= sum([Square[I,J] : J in 1..N]), % rows
        Sum #= sum([Square[J,I] : J in 1..N]) % columns
    end,
    % diagonal sums
    Sum #= sum([Square[I,I] : I in 1..N]),
    Sum #= sum([Square[I,N-I+1] : I in 1..N]),
    solve([ffd,reverse_split],Square).

magic2(N,Square) =>
    % for cp 13 works fine. 14 never solves.
    % for sat 20 in 8 seconds.
    NN = N*N,
    Square = new_array(N,N),
    Square :: 1..NN,
    all_different(Square.vars()),
    foreach (I in 1..N)
    Sum1 #= sum([Square[I,J] : J in 1..N]), % rows
    Sum2 #= sum([Square[J,I] : J in 1..N]) % columns
    end,
    % diagonal sums
    Sum3 #= sum([Square[I,I] : I in 1..N]),
    Sum4 #= sum([Square[I,N-I+1] : I in 1..N]),
    Sum1 #= Sum2,
    Sum2 #= Sum3,
    Sum3 #= Sum4,
    % solve([rand_var,rand_val],Square),
    solve(Square),
    print([Sum1,Sum2,Sum3,Sum4]).

